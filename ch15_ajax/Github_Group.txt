깃허브 그룹 프로젝트 하는 법

1. 깃허브 레파지토리 만들기 
2. 팀원들 초대하기 Invite collaborators 클릭 (만든사람이 초대 가능) 
3. Add people 클릭 후 팀원 아이디 검색 
4. 팀원이 초대 수락해야 됨 (이메일로 수락가능) 

1)--> 프로젝트 환경 세팅 
레파지토리 세팅 
브랜치 연결되있는지 확인할것 
git remote add origin -> https://github.com/(레파지토리이름)/group-project.git

C에 폴더만들고 vsc에서 인덱스 파일생성 -->깃허브로 옮기기 터미널 클릭 
마스터 브랜치로 설정되어 있음
git init -> git add . -> git commit -m "first commit" -> git remote add origin https://github.com/(레파지토리이름)/group-project.git -> git push origin master 파일 업로드 된것 깃허브에서 확인

~~~~~~~'git 프로젝트 푸시까지 해서 index 올림'

2) develop 브랜치 만들기 (마스터의 복사본인 develop 브랜치 만들기)
마스터에는 수정 완료 된 것만 올릴거라 연습장 브랜치가 필요해서 develop브랜치를 만들어야함

다시 vsc로 돌아와서 터미널에 git checkout -b develop -> develop 으로 브랜치 변경됐는지 확인 
->git push 하면 git push --set-up upstream origin develop 라는 말이 뜸 이 명령어 그대로 다시 입력
하면 브랜치가 생성됨 깃허브 레퍼지토리에 master 클릭 후 브랜치 하단에 develop 브랜치 생성 확인

your master branch isn't protected 란 명령어가 있음 -> 마스터 브랜치 보호 위해 protect this branch
클릭 후 Look branch, Require a pull request brfot merging 체크 Require approvals 체크 후 하단에 크리에이트 클릭 

--- 잘 되었나 확인 
vsc로 다시 이동해서 터미널에 git checkout master 입력 git add . -> git commit -m "first commit"
하고 git push origin master 하면 에러 나면 정상적으로 마스터 브랜치를 보호하는 중임 

확인 후  다시 develop 브랜치로 넘어가기 git checkout develop 

3)프로젝트 보드 생성 
깃허브 그룹 레퍼지토리에서 projects 클릭 Link a project 클릭 후 뜨는 창 하단에 Create new project 
클릭 하면 생성될 프로젝트 레파지토리 타입이 뜸 (보드나 등등) 보드 클릭하면 
Todo / In progress / Done 세 부분으로 나눠짐  
Todo 보드 하단에 add 클릭하면 뭘 만들어야 하는지 작성할수 있음 작성 후 작성된 부분이 보드에 뜨는데 보드에 들어가면 오른쪽 상단에 Add ass~눌러서 할 일 선택 해서 In progress 로 옮길수 있다
progress 로 옮겨진 것중 하나를 클릭해 convert to issue 를 클릭하면 프리뷰에 코드 작성 가능 
작성 후 할일의 제목을 누르면 오른쪽 Development 부분에 Create a branch 를 생성할수 있다 

4) feature 브랜치 만들기 
오른쪽 Development 부분에 Create a branch 를 클릭후 create a ~ this issue 에서 브런치 이름을 만들어준다. 만든 후 왼쪽에 change 브랜치 클릭 하면 '나' 만 쓸수 있는 연습장인 feature 생성 가능 
브런치 source 는 마스터가 아니고 develop 으로 변경한 후 create branch 클릭 하면 checkout in ~ 
창에 내 레포지토리 주소가 써있다 복사 후 내 로컬 컴에 세팅 하기 위해 vsc 의 터미널에 
git fetch origin -> git checkout (feature -A내 연습장 이름)
 
=================================== 프로젝트 마스터의 역할 ===========

★ 팀원 
5) 팀원들이 만들어진 프로젝트에 각자 로컬 컴에 클론하기 
깃허브 그룹 프로젝트 레파지토리에 코드 클릭 후 clone 창의 HTTS 주소 클릭 
깃벤치나 명령 프롬프트에 git clone https://그룹프로젝트 복사 클론 주소입력 후 .git 옆에 내 이름 붙여서 실행 해서 vsc에 마스터 브랜치의 인덱스 파일이 왔는 지 확인 

깃허브 웹에서 상단 프로젝트 클릭 후 내가 뭘 해야 되는지 확인, 보드에 있는 In progress 에서 클릭 
후 convert to issue 의 그룹 프로젝트 클릭 후 제목 클릭해 열기 

feature B(팀원 연습장) 브랜치 만들기 
오른쪽 Development 부분에 Create a branch 를 클릭후 create a ~ this issue 에서 브런치 이름을 만들어준다. 만든 후 왼쪽에 change 브랜치 클릭 하면 '나' 만 쓸수 있는 연습장인 feature 생성 가능 

브런치 source 는 마스터가 아니고 develop 으로 변경한 후 create branch 클릭 하면 checkout in ~ 
창에 내 레포지토리 주소가 써있다 복사 후 내 로컬 컴에 세팅 하기 위해 vsc 의 터미널에 
git fetch origin -> git checkout (feature -B내 연습장 이름)

이제 팀원의 새 연습장에 개발 하면 됨.

6) 개발 된 소스코드 올리기 
vsc에서 git add . -> git commit -m "연습장 이름" -> git push 하면 업로드 
레퍼지토리로 돌아와서 내 연습장 확인 가능 

만든 후 바로 master에 올리면 안되고 develop에 올려야 함 

7) 풀 리케스트(PR)만들기 
그룹 레퍼지토리에서 상단에 Pull requests 클릭 후 new PR 클릭 하면 왼쪽 상단에 
compare develop <- compare 내연습장 에서 develop 로 설정 하면 Able to merge 확인 후 create PR 클릭 하면 open a pull request 에서 뭘 작성했는지 write 창에 작성 후 하단 create PR 클릭 

develop from 내 연습장 확인 잘 할것  


Files changed 에 파일 확인 하면서 코드 리뷰 하고 오른쪽 상단에 review 누르면 Approve는 승인

만약 리뷰를 보고 코드를 수정해야 하면 vsc 가서 코드를 수정하고 터미널에서 다시 
git add . -> git commit -m "변경파일명" -> git push 하면 업로드
코드 수정후에는 깃허브 레파지토리의 리뷰도 사라짐 (코드가 수정됐으므로) 

Approve 하게되면 Changes approved  받았으면 merge PR 를 팀원(나) 가 클릭 하고 컨펌 merge 하면
pull R 로 전송됨 pull request successfully merged and closed 가 뜨고 나면 코드를 확인하러 감 

왼쪽 상단에 코드 클릭후 develop 브랜치로 이동해서 확인 

============================= 프로젝트 마스터의 일 ================

※ 깃 충돌 해결 방법 

프로젝트 마스터의 연습장 feature -A 작업한 것을 vsc의 터미널에서 git add . -> git commit -m "feature -A" -> git push 하면 업로드 후 풀 리퀘스트 만들기

그룹 레퍼지토리에서 상단에 Pull requests 클릭 후 new PR 클릭 하면 왼쪽 상단에 
compare develop <- compare 내연습장 에서 develop 로 설정 하면 Able to merge 확인 후 create PR 클릭 하면 open a pull request 에서 뭘 작성했는지 write 창에 작성 후 하단 create PR 클릭 

Approve 받으면 문제없는 상황인데 This branch has conflicts ~ 에러가 났을 경우 
현재 develop 브랜치의 버전이 팀원의 코드가 올라가서 달라졌기 때문에 에러가 남 
가급적 에러 메세지의 하단에 command line 으로 이동해 충돌을 해결 클릭하면 순서가 나옴 

※ 깃 충돌 해결 (1) develop 브랜치에 최신 코드 가져오기 

vsc의 터미널에서 현재(feature-A) 체크아웃하기 git checkout develop 입력 후 
git pull origin develop 입력 

(2) 다시 feature-A 브랜치로 돌아가기 
git checkout -  < 마이너스 까지 입력 해주면 직전의 브랜치로 돌아감 

(3) feature브랜치에서 develop 브랜치와 머지하기 
  (디벨롭과 합치기 작업 후에 정리된 코드를 디벨롭으로 보냄) 
vsc터미널에서 git merge develop 하면 vsc에서 내용이 뜸 팀원들과 의논 해서 코드 변경
Accept ~ | Accept ~ | Accept ~ | 등 써있음 코드를 정리 후 실행되는것 확인 하고 다시 올리기 
  git add . -> git commit -m "파일명" -> git push 하면 업로드

Files changed 에 파일 확인 하면서 코드 리뷰 하고 오른쪽 상단에 review 누르면 Approve는 승인

만약 리뷰를 보고 코드를 수정해야 하면 vsc 가서 코드를 수정하고 터미널에서 다시 
git add . -> git commit -m "변경파일명" -> git push 하면 업로드
코드 수정후에는 깃허브 레파지토리의 리뷰도 사라짐 (코드가 수정됐으므로) 

Approve 하게되면 Changes approved  받았으면 merge PR 를 팀원(나) 가 클릭 하고 컨펌 merge 하면
pull R 로 전송됨 pull request successfully merged and closed 가 뜨고 나면 코드를 확인하러 감 

왼쪽 상단에 코드 클릭후 develop 브랜치로 이동해서 확인 

(4)develop에서 master 로 배포하기 

그룹 레퍼지토리에서 상단에 Pull requests 클릭 후 new PR 클릭 하면 왼쪽 상단에 
compare master <- compare develop 설정 하면 Able to merge 확인 후 create PR 클릭 하면 open a pull request 에서 뭘 작성했는지 write 창에 작성 후 하단 create PR 클릭 

Approve 하고 마스터 브랜치에서 확인 

